Descriptor:
  Name: EntraLogonPlugin
  DisplayName: Find Unusual Entra Logins Or User Details.
  DescriptionForModel: A set of skills designed to help the user find unusual logins by their Entra tenant users and changes to their Entra accounts that might be considered an indicator of compromise.
  Description: Skills to detect unusual or risky user logons, or logons prohibited by School System.
  SupportedAuthTypes:
    - None

SkillGroups:
  - Format: KQL
    Skills:
      - Name: GetVPNUserLogons
        DisplayName: Get the top 25 most recent user logons where they are using a VPN ISP.
        DescriptionForModel: This skill helps the user to find all logins or logons of their Entra tenant users where the ISP of the login contains the term "VPN". This can help the user find logins where the login was suspicious, anonymous, or evasive in nature due to the presence of a VPN by the user.
        Description: Fetches the list of users who have successfully logged in with an ISP that has VPN in the name
        ExamplePrompts:
        - Give me all logins that have occured in the past 24 hours using a VPN
        - Tell me about all of my logins with a VPN in the past X days/hours/weeks/month(s)
        - What users have logged in with a VPN?
        Settings:
            Target: Defender
            Template: |-
              IdentityLogonEvents
              | where ISP contains "vpn"
              | where Location !contains_cs "US" and Location !contains_cs "United States"
              | where ActionType == "LogonSuccess"
              | top 25 by TimeGenerated desc
      - Name: OutsideOfUSLogins  
        DisplayName: Get the top 25 most recent user logins from a past number of days outside of the United States
        Description: Fetches user logins that occured outside of the United States within a variable amount of time in the past.
        ExamplePrompts:
        - Tell me about all user logins in the past x days/hours/month(s) that happened outside of the united states
        - What logons have occured outside of the US?
        Inputs:
          - Name: dayRange
            PlaceholderValue: The time range for the query (e.g., 1d, 7d)
            Description: Time range to perform a KQL query in the format of day number followed by `d`.
            DescriptionForModel: This query searches for all user logon days for the user specified number of days where the logon occured from a country other than the United States. The goal of the prompt is to provide a list of such users with various information about them in order to identify their location, IP Address, etc...
            DefaultValue: 1d
            Required: false
        Settings:
            Target: Defender
            Template: |-
              IdentityLogonEvents
              | where TimeGenerated >= ago({{dayRange}})
              | where Location !contains_cs "US" and Location !contains_cs "United States"
              | project TimeGenerated, AccountName, AccountDomain, AccountUpn, Location, IPAddress, DeviceName, OSPlatform, LogonType, ActionType
              | top 25 by TimeGenerated desc
             
             
      - Name: RecentMFAChanges
        DisplayName: Recent MFA Changes
        DescriptionForModel: |-
          Performs a KQL query on the `AADSignInEventsBeta` table to investigate recent changes to MFA settings for all users. Key features include:
          - **MFA Method Tracking**:
            - Detects methods added, removed, or modified.
            - Identifies changes to default authentication methods.
          - **Detailed Insights**:
            - `Timestamp`: Time of the change.
            - `Actor`: User or system initiating the change.
            - `Action`: Description of the change (e.g., "Method Added," "Method Removed," or "Default Method Changed").
            - `OldValue` and `NewValue`: Details of the previous and updated MFA methods.
          - **Anomaly Detection**:
            - Highlights suspicious changes that may indicate unauthorized access or account compromise.
            - Prompts recommendations such as re-authentication, MFA enforcement, or further security review.
          This skill enables security analysts to monitor and investigate MFA changes, ensuring account security and identifying potential threats.
        Description: Track recent MFA changes for all users over the past 7 days, identifying added, removed, or modified authentication methods. Provides detailed insights into changes, highlights anomalies, and recommends security actions if unusual activity is detected.
        Settings:
            Target: Defender
            Template: |-
                // This query investigates MFA changes for a user over the past seven days, tracking additions, removals, or modifications.
                // Unusual changes can indicate unauthorized access or account compromise, prompting further actions like MFA reviews or security checks.
                // The query extracts detailed logs of MFA changes, including timestamps, the actor responsible for the change, and modified methods.
                // The query helps detect suspicious changes and prompts recommended actions.
                let AuthenticationMethods = dynamic(["TwoWayVoiceMobile","TwoWaySms","TwoWayVoiceOffice","TwoWayVoiceOtherMobile","TwoWaySmsOtherMobile","OneWaySms","PhoneAppNotification","PhoneAppOTP"]);
                let TimeFrame = ago(7d);
                // This segment retrieves MFA-related changes from CloudAppEvents, focusing on modifications to strong authentication methods.
                let AuthenticationMethodChanges = CloudAppEvents
                | where ActionType == "Update user." and RawEventData contains "StrongAuthenticationMethod"
                | where Timestamp > TimeFrame
                | extend Target = tostring(RawEventData.ObjectId)
                | extend Actor = tostring(RawEventData.UserId)
                | mv-expand ModifiedProperties = parse_json(RawEventData.ModifiedProperties)
                | where ModifiedProperties.Name == "StrongAuthenticationMethod"
                | project Timestamp, Actor, Target, ModifiedProperties, RawEventData, ReportId;
                // Extract old values (before the MFA method was changed) to compare with new values.
                let OldValues = AuthenticationMethodChanges
                | extend OldValue = parse_json(tostring(ModifiedProperties.OldValue))
                | mv-apply OldValue on (extend Old_MethodType=tostring(OldValue.MethodType), Old_Default=tostring(OldValue.Default) | sort by Old_MethodType);
                // Extract new values (after the MFA method was changed) for comparison with the old values.
                let NewValues = AuthenticationMethodChanges
                | extend NewValue = parse_json(tostring(ModifiedProperties.NewValue))
                | mv-apply NewValue on (extend New_MethodType=tostring(NewValue.MethodType), New_Default=tostring(NewValue.Default) | sort by New_MethodType);
                // Identify removed MFA methods by comparing old methods with new ones.
                let RemovedMethods = AuthenticationMethodChanges
                | join kind=inner OldValues on ReportId
                | join kind=leftouter NewValues on ReportId, $left.Old_MethodType == $right.New_MethodType
                | project Timestamp, ReportId, ModifiedProperties, Actor, Target, Old_MethodType, New_MethodType
                | where Old_MethodType != New_MethodType
                | extend Action = strcat("Removed (", AuthenticationMethods[toint(Old_MethodType)], ") from Authentication Methods.")
                | extend ChangedValue = "Method Removed";
                // Identify added MFA methods by comparing new methods with old ones.
                let AddedMethods = AuthenticationMethodChanges
                | join kind=inner NewValues on ReportId
                | join kind=leftouter OldValues on ReportId, $left.New_MethodType == $right.Old_MethodType
                | project Timestamp, ReportId, ModifiedProperties, Actor, Target, Old_MethodType, New_MethodType
                | where Old_MethodType != New_MethodType
                | extend Action = strcat("Added (", AuthenticationMethods[toint(New_MethodType)], ") as Authentication Method.")
                | extend ChangedValue = "Method Added";
                // Track changes to the default authentication method.
                let DefaultMethodChanges = AuthenticationMethodChanges
                | join kind=inner OldValues on ReportId
                | join kind=inner NewValues on ReportId
                | where Old_Default != New_Default and Old_MethodType == New_MethodType and New_Default == "true"
                | join kind=inner OldValues on ReportId | where Old_Default1 == "true" and Old_MethodType1 != New_MethodType | extend Old_MethodType = Old_MethodType1
                | extend Action = strcat("Default Authentication Method was changed to (", AuthenticationMethods[toint(New_MethodType)], ").")
                | extend ChangedValue = "Default Method";
                // Combine the results of added, removed, and default method changes into a single output.
                union RemovedMethods, AddedMethods, DefaultMethodChanges
                | project Timestamp, Action, Actor, Target, ChangedValue, OldValue=case(isempty(Old_MethodType), "", strcat(Old_MethodType, ": ", AuthenticationMethods[toint(Old_MethodType)])), NewValue=case(isempty(New_MethodType), "", strcat(New_MethodType, ": ", AuthenticationMethods[toint(New_MethodType)]))
                | distinct *
